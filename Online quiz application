<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Online Quiz Application</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .quiz-container {
            background-color: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            width: 100%;
            max-width: 600px;
            padding: 30px;
            transition: all 0.3s ease;
        }

        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 20px;
            font-size: 2.2rem;
        }

        .screen {
            display: none;
            animation: fadeIn 0.5s ease;
        }

        .active {
            display: block;
        }

        .welcome-screen p {
            text-align: center;
            margin-bottom: 25px;
            font-size: 1.1rem;
            color: #555;
            line-height: 1.6;
        }

        .btn {
            background: linear-gradient(to right, #6a11cb, #2575fc);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 50px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            transition: all 0.3s ease;
            display: block;
            margin: 20px auto;
            width: 200px;
            text-align: center;
            box-shadow: 0 4px 15px rgba(106, 17, 203, 0.3);
        }

        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(106, 17, 203, 0.4);
        }

        .btn:active {
            transform: translateY(1px);
        }

        .question-count {
            text-align: center;
            margin-bottom: 15px;
            color: #6a11cb;
            font-weight: 600;
        }

        .question-text {
            font-size: 1.3rem;
            margin-bottom: 20px;
            color: #333;
            text-align: center;
            line-height: 1.5;
        }

        .options-container {
            display: flex;
            flex-direction: column;
            gap: 12px;
            margin-bottom: 25px;
        }

        .option {
            padding: 15px;
            border: 2px solid #e0e0e0;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 1rem;
        }

        .option:hover {
            background-color: #f5f5f5;
            border-color: #c0c0c0;
        }

        .option.selected {
            background-color: #e3f2fd;
            border-color: #2196f3;
            color: #1976d2;
        }

        .option.correct {
            background-color: #e8f5e9;
            border-color: #4caf50;
            color: #2e7d32;
        }

        .option.incorrect {
            background-color: #ffebee;
            border-color: #f44336;
            color: #c62828;
        }

        .navigation {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
        }

        .navigation button {
            padding: 10px 20px;
            border-radius: 50px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        #prev-btn {
            background-color: #f5f5f5;
            color: #333;
            border: 2px solid #e0e0e0;
        }

        #next-btn {
            background: linear-gradient(to right, #6a11cb, #2575fc);
            color: white;
            border: none;
        }

        #prev-btn:hover {
            background-color: #e0e0e0;
        }

        #next-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(106, 17, 203, 0.3);
        }

        .results-screen h2 {
            text-align: center;
            margin-bottom: 20px;
            color: #333;
        }

        .score-container {
            text-align: center;
            margin: 25px 0;
        }

        .score {
            font-size: 3rem;
            font-weight: 700;
            color: #6a11cb;
            margin: 10px 0;
        }

        .score-text {
            font-size: 1.2rem;
            color: #555;
            margin-bottom: 20px;
        }

        .answers-review {
            margin-top: 30px;
            text-align: left;
        }

        .answers-review h3 {
            margin-bottom: 15px;
            color: #333;
            border-bottom: 2px solid #f0f0f0;
            padding-bottom: 8px;
        }

        .review-item {
            margin-bottom: 15px;
            padding: 15px;
            border-radius: 10px;
            background-color: #f9f9f9;
        }

        .review-question {
            font-weight: 600;
            margin-bottom: 8px;
        }

        .review-answer {
            display: flex;
            align-items: center;
            margin: 5px 0;
        }

        .correct-answer {
            color: #4caf50;
            font-weight: 600;
        }

        .incorrect-answer {
            color: #f44336;
            text-decoration: line-through;
        }

        .timer {
            text-align: center;
            font-size: 1.1rem;
            font-weight: 600;
            color: #ff5722;
            margin-bottom: 15px;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @media (max-width: 600px) {
            .quiz-container {
                padding: 20px;
            }
            
            h1 {
                font-size: 1.8rem;
            }
            
            .navigation {
                flex-direction: column;
                gap: 10px;
            }
            
            .navigation button {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="quiz-container">
        <!-- Welcome Screen -->
        <div id="welcome-screen" class="screen active">
            <h1>Welcome to the Quiz Challenge</h1>
            <p>Test your knowledge with this interactive quiz! You'll have 15 seconds to answer each question. Good luck!</p>
            <button id="start-btn" class="btn">Start Quiz</button>
        </div>

        <!-- Quiz Screen -->
        <div id="quiz-screen" class="screen">
            <div class="question-count">
                Question <span id="current-question">1</span> of <span id="total-questions">5</span>
            </div>
            <div class="timer">
                Time Left: <span id="time-left">15</span>s
            </div>
            <div class="question-text" id="question-text"></div>
            <div class="options-container" id="options-container"></div>
            <div class="navigation">
                <button id="prev-btn">Previous</button>
                <button id="next-btn">Next</button>
            </div>
        </div>

        <!-- Results Screen -->
        <div id="results-screen" class="screen">
            <h2>Quiz Completed!</h2>
            <div class="score-container">
                <div class="score-text">Your Score</div>
                <div class="score" id="final-score">0/5</div>
                <div class="score-text" id="performance-text">Keep practicing!</div>
            </div>
            <div class="answers-review" id="answers-review"></div>
            <button id="restart-btn" class="btn">Take Quiz Again</button>
        </div>
    </div>

    <script>
        // Quiz questions data
        const quizQuestions = [
            {
                question: "Which language runs in a web browser?",
                options: ["Java", "C", "Python", "JavaScript"],
                correct: 3
            },
            {
                question: "What does CSS stand for?",
                options: ["Central Style Sheets", "Cascading Style Sheets", "Cascading Simple Sheets", "Cars SUVs Sailboats"],
                correct: 1
            },
            {
                question: "What does HTML stand for?",
                options: ["Hypertext Markup Language", "Hypertext Markdown Language", "Hyperloop Machine Language", "Helicopters Terminals Motorboats Lamborghinis"],
                correct: 0
            },
            {
                question: "Which of these is a JavaScript framework?",
                options: ["Django", "Flask", "React", "Laravel"],
                correct: 2
            },
            {
                question: "What year was JavaScript launched?",
                options: ["1996", "1995", "1994", "None of the above"],
                correct: 1
            }
        ];

        // DOM Elements
        const welcomeScreen = document.getElementById('welcome-screen');
        const quizScreen = document.getElementById('quiz-screen');
        const resultsScreen = document.getElementById('results-screen');
        const startBtn = document.getElementById('start-btn');
        const prevBtn = document.getElementById('prev-btn');
        const nextBtn = document.getElementById('next-btn');
        const restartBtn = document.getElementById('restart-btn');
        const questionText = document.getElementById('question-text');
        const optionsContainer = document.getElementById('options-container');
        const currentQuestionEl = document.getElementById('current-question');
        const totalQuestionsEl = document.getElementById('total-questions');
        const timeLeftEl = document.getElementById('time-left');
        const finalScoreEl = document.getElementById('final-score');
        const performanceTextEl = document.getElementById('performance-text');
        const answersReviewEl = document.getElementById('answers-review');

        // Quiz state variables
        let currentQuestionIndex = 0;
        let userAnswers = Array(quizQuestions.length).fill(null);
        let score = 0;
        let timer;
        let timeLeft = 15;

        // Initialize the quiz
        function initQuiz() {
            totalQuestionsEl.textContent = quizQuestions.length;
            showScreen(welcomeScreen);
        }

        // Show a specific screen
        function showScreen(screen) {
            document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
            screen.classList.add('active');
        }

        // Start the quiz
        function startQuiz() {
            currentQuestionIndex = 0;
            userAnswers = Array(quizQuestions.length).fill(null);
            score = 0;
            showScreen(quizScreen);
            loadQuestion();
            startTimer();
        }

        // Load the current question
        function loadQuestion() {
            const question = quizQuestions[currentQuestionIndex];
            currentQuestionEl.textContent = currentQuestionIndex + 1;
            questionText.textContent = question.question;
            
            // Clear previous options
            optionsContainer.innerHTML = '';
            
            // Create new options
            question.options.forEach((option, index) => {
                const optionElement = document.createElement('div');
                optionElement.classList.add('option');
                
                // Check if this option was previously selected
                if (userAnswers[currentQuestionIndex] === index) {
                    optionElement.classList.add('selected');
                }
                
                optionElement.textContent = option;
                optionElement.addEventListener('click', () => selectOption(index));
                optionsContainer.appendChild(optionElement);
            });
            
            // Update navigation buttons
            prevBtn.disabled = currentQuestionIndex === 0;
            nextBtn.textContent = currentQuestionIndex === quizQuestions.length - 1 ? 'Finish' : 'Next';
            
            // Reset and start timer
            resetTimer();
            startTimer();
        }

        // Select an option
        function selectOption(optionIndex) {
            userAnswers[currentQuestionIndex] = optionIndex;
            
            // Update UI to show selected option
            document.querySelectorAll('.option').forEach((option, index) => {
                if (index === optionIndex) {
                    option.classList.add('selected');
                } else {
                    option.classList.remove('selected');
                }
            });
        }

        // Navigate to previous question
        function prevQuestion() {
            if (currentQuestionIndex > 0) {
                currentQuestionIndex--;
                loadQuestion();
            }
        }

        // Navigate to next question or finish quiz
        function nextQuestion() {
            if (currentQuestionIndex < quizQuestions.length - 1) {
                currentQuestionIndex++;
                loadQuestion();
            } else {
                finishQuiz();
            }
        }

        // Start the timer for the current question
        function startTimer() {
            clearInterval(timer);
            timeLeft = 15;
            timeLeftEl.textContent = timeLeft;
            
            timer = setInterval(() => {
                timeLeft--;
                timeLeftEl.textContent = timeLeft;
                
                if (timeLeft <= 0) {
                    clearInterval(timer);
                    // Auto-advance to next question when time runs out
                    if (currentQuestionIndex < quizQuestions.length - 1) {
                        currentQuestionIndex++;
                        loadQuestion();
                    } else {
                        finishQuiz();
                    }
                }
            }, 1000);
        }

        // Reset the timer
        function resetTimer() {
            clearInterval(timer);
            timeLeft = 15;
            timeLeftEl.textContent = timeLeft;
        }

        // Finish the quiz and show results
        function finishQuiz() {
            clearInterval(timer);
            calculateScore();
            showResults();
            showScreen(resultsScreen);
        }

        // Calculate the final score
        function calculateScore() {
            score = 0;
            quizQuestions.forEach((question, index) => {
                if (userAnswers[index] === question.correct) {
                    score++;
                }
            });
            
            finalScoreEl.textContent = `${score}/${quizQuestions.length}`;
            
            // Set performance text based on score
            if (score === quizQuestions.length) {
                performanceTextEl.textContent = "Perfect! You're a quiz master!";
            } else if (score >= quizQuestions.length * 0.7) {
                performanceTextEl.textContent = "Great job! You know your stuff!";
            } else if (score >= quizQuestions.length * 0.5) {
                performanceTextEl.textContent = "Good effort! Keep learning!";
            } else {
                performanceTextEl.textContent = "Keep practicing! You'll get better!";
            }
            
            // Generate answers review
            generateAnswersReview();
        }

        // Generate the answers review section
        function generateAnswersReview() {
            answersReviewEl.innerHTML = '<h3>Review Your Answers</h3>';
            
            quizQuestions.forEach((question, index) => {
                const reviewItem = document.createElement('div');
                reviewItem.classList.add('review-item');
                
                const questionEl = document.createElement('div');
                questionEl.classList.add('review-question');
                questionEl.textContent = `${index + 1}. ${question.question}`;
                reviewItem.appendChild(questionEl);
                
                const userAnswerEl = document.createElement('div');
                userAnswerEl.classList.add('review-answer');
                
                if (userAnswers[index] !== null) {
                    const userAnswerText = question.options[userAnswers[index]];
                    const isCorrect = userAnswers[index] === question.correct;
                    
                    userAnswerEl.textContent = `Your answer: ${userAnswerText}`;
                    userAnswerEl.classList.add(isCorrect ? 'correct-answer' : 'incorrect-answer');
                } else {
                    userAnswerEl.textContent = "Your answer: No answer selected";
                    userAnswerEl.classList.add('incorrect-answer');
                }
                
                reviewItem.appendChild(userAnswerEl);
                
                // Show correct answer if user was wrong
                if (userAnswers[index] !== question.correct) {
                    const correctAnswerEl = document.createElement('div');
                    correctAnswerEl.classList.add('review-answer', 'correct-answer');
                    correctAnswerEl.textContent = `Correct answer: ${question.options[question.correct]}`;
                    reviewItem.appendChild(correctAnswerEl);
                }
                
                answersReviewEl.appendChild(reviewItem);
            });
        }

        // Event listeners
        startBtn.addEventListener('click', startQuiz);
        prevBtn.addEventListener('click', prevQuestion);
        nextBtn.addEventListener('click', nextQuestion);
        restartBtn.addEventListener('click', () => {
            showScreen(welcomeScreen);
        });

        // Initialize the quiz when the page loads
        window.addEventListener('DOMContentLoaded', initQuiz);
    </script>
</body>
</html>
